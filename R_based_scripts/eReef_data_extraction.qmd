---
title: "eReef_data_extraction"
author: "Denisse Fierro Arcos"
date: "2024-01-14"
format: 
  gfm:
    toc: true
---

# Extracting eReefs outputs using a shapefile

[eReefs](https://research.csiro.au/ereefs/) is a group of environmental models managed by various government and non-profit organisations. These models can simulate past conditions and predict future states for hydrodynamic conditions, sediment transport, and water quality within the Greet Barrier Reef (GBR). The aim is to provide information about the past and current states of GBR, as well as its likely future condition.  
  
eReefs model outputs can be found in the DMS under the [**eReefs** collection](https://stac.reefdata.io/browser/collections/ereefs). In this notebook, we will use the [daily hydrodynamic model outputs](https://stac.reefdata.io/browser/collections/ereefs/items/aims-ereefs-agg-hydrodynamic-1km-daily) as an example of how to extract data.  
  
We will also use the GBR feature shapefile to extract data from eReef.  
  
## Loading libraries
  
```{r}
#| results: hide
#| message: false
#| warning: false

#Loading useful_functions script
source("useful_functions.R")
#Mapping
library(terra)
library(sf)
library(tidyterra)
library(rnaturalearth)
#Data manipulation
library(tibble)
library(tidyr)
```
  
## Loading Whitsunday features from GBR shapefile
We will use the GBR features here, but we will only load boundaries for the Whitsunday for this exercise. However, the function loading these GBR features can load the entire shapefile or any other GBR feature.  
  
```{r}
#Loading boundaries for Whitsundays
whitsundays <- gbr_features(site_name = "Whitsunday")

#Checking results of query
whitsundays
```
  
## Connecting to RIMREP DMS collection via API
From the STAC catalogue item for the [daily hydrodynamic model outputs](https://stac.reefdata.io/browser/collections/ereefs/items/aims-ereefs-agg-hydrodynamic-1km-daily), we can get the link to the API from the *Additional Resources* section of the page on the left under the map. As an example, we will access data for using the API link for the period between 2023-01-01 and 2023-01-07.  
  
**Note:** Before running the code chunk below, make sure you either have store your user credentials as environmental variables, or have this information with you to input in the `connect_dms_dataset` function below. Alternatively, if you already have an access token, you can provide this as an input in the `connect_dms_dataset` function. Refer to **The data API** subsection under **How to use DMS services and data** in the [README page](https://github.com/aodn/rimrep-training/blob/main/CoTS-training-Jan2024/README.md) for more information.  
  
If you do not user credentials, you will not be able to access our API, please contact the DMS team to set up an account by emailing [info-dms@utas.edu.au](mailto:info-dms@utas.edu.au).  
    
```{r}
#Defining API URL (obtained from STAC catalogue)
base_url <- "https://pygeoapi.reefdata.io/collections/aims-ereefs-agg-hydrodynamic-1km-daily/"

#Defining variable of interest (obtained from STAC catalogue)
variable_name <- "salt"

#Connecting to DMS to extract data
salt_gbr <- connect_dms_dataset(base_url, variable_name, start_time = "2023-01-01", 
                                end_time = "2023-01-07", bounding_shape = whitsundays)
```
  
## Plotting data 
We will plot the first layer of this raster in a map to check the temperature data.  
  
```{r}
#Get map of Australia
aust <- ne_countries(country = "Australia", returnclass = "sf")

#Start a plot
ggplot()+
  #Plot one raster layer
  geom_spatraster(data = salt_gbr$`salt_k=-0.5_1`)+
  #Choose a nicer palette for our map
  scale_fill_distiller(palette = "BuGn")+
  #Add Australia
  geom_sf(data = aust)+
  #Add Whitsundays
  geom_sf(data = whitsundays, fill = NA, colour = "#ff9966")+
  #Establish map limits
  lims(x = c(148, 150), y = c(-20.5, -20))+
  #Apply a nice predefined theme
  theme_bw()+
  #Add a title
  labs(title = "Salinity (PSU)")+
  #Center the plot title
  theme(plot.title = element_text(hjust = 0.5))
```
  
The grey areas are land areas without any salinity data.  
  
## Clipping raster to match shapefile
We will use the shapefile for the Whitsundays to extract data from the raster, and then create time series.  
  
```{r}
#First, we will check that the CRS is the same in shapefile and the raster
st_crs(whitsundays)$input == st_crs(salt_gbr)$input
```
  
Since, they are not the same, we will transform our shapefile to match the CRS of the raster. Then, we will extract reef polygons only because we do not care about what is happening on land.  
  
```{r}
whi_reefs <- whitsundays |> 
  #We will use reef areas only
  filter(str_detect(GBR_NAME, "Reef")) |> 
  st_transform(st_crs(salt_gbr))

#We can check if they match now
st_crs(whi_reefs)$input == st_crs(salt_gbr)$input
```
  
We can now extract the data from the raster to the polygon. For simplicity, we will extract data for layers that have `-0.5` included in their name. In the second notebook, we will expand on the reasoning behind this choice.  
  
```{r}
#Selecting layers
layer_names <- str_subset(names(salt_gbr), "-0.5")

#Subsetting raster
sss_gbr <- salt_gbr[[layer_names]]

#Extracting data
salt_whi_reefs <- terra::extract(sss_gbr, whi_reefs)

#Checking result
head(salt_whi_reefs)
```
  
We can see that we have seven columns with data inside our columns, that is one column for each day that we are interested in. We can now calculate a mean for each day.  
  
```{r}
salt_whi_reefs <- salt_whi_reefs |> 
  #We will remove ID because it is not useful to us
  select(-ID)

#We will rename columns using the dates from the raster
names(salt_whi_reefs) <- unique(time(salt_gbr))

salt_whi_reefs <- salt_whi_reefs |> 
  #We will reorganise our data so it is easier to calculate a daily mean
  pivot_longer(everything(), values_to = "salinity", names_to = "date") |> 
  #Ensuring date column is in date format
  mutate(date = ymd(date)) |> 
  #We will group by date and calculate the mean
  group_by(date) |> 
  summarise(mean_daily_sal = mean(salinity, na.rm = T))

#Checking results
salt_whi_reefs
```
  
Now we can make a line plot with this information.  
  
```{r}
salt_whi_reefs |> 
  ggplot(aes(x = date, y = mean_daily_sal))+
  geom_line()+
  theme_bw()
```
  
That is the end of the notebook. Do not forget that you can save any data accessed from the DMS or the outputs produced here.  
  